plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}
apply from: "../config_common.gradle"
android {
    namespace 'com.spepc.filedownload'
    compileSdk 31


    defaultConfig {
        applicationId "com.spepc.filedownload"
        minSdk 26
        targetSdk targetSdk
        versionCode 3
        versionName "1.0.2"
        flavorDimensions "channel"   // 渠道
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        signingConfig signingConfigs.as_key_store

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64' ,'armeabi-v7a'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        debug{
            minifyEnabled false
            buildConfigField 'String', 'AROUTER_PREFIX', "\"/${project.name}\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            // 是否zip对齐
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            buildConfigField 'String', 'AROUTER_PREFIX', "\"/${project.name}\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    lintOptions {
        disable 'GoogleAppIndexingWarning'
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {

        sourceCompatibility sourceCompatibility
        targetCompatibility targetCompatibility
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
    // 打包配置 3.0 以后打包输出方式
    android.applicationVariants.all { variant ->

        variant.outputs.all {
            def date = new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
            outputFileName = "fileDownload_${date}_v${variant.versionName}.apk"
        }
    }

}
task clearJar(type: Delete) {
    delete 'build/libs/lib_download.jar'
}

task makeJar(type: Copy) {
    // 删除存在的jar
    delete 'build/libs/mylib.jar'

    // 设置插入位置
    from('build/intermediates/packaged-classes/release/')
    into('build/libs/')

    // 重命名jar文件
    rename('classes.jar', 'lib_download.jar')
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.appcompat
    implementation project(path: ":lib_download")
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout

    implementation('com.guolindev.permissionx:permissionx:1.5.1')
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

}